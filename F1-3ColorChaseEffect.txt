/*
 * F1 Racing Color chase function with black space between colors.
 * color1, color2, and color3 = colors of the driver teams
 */
static uint16_t chase(uint32_t color1, uint32_t color2, uint32_t color3, bool do_palette)
{
  uint16_t counter = strip.now * ((SEGMENT.speed >> 2) + 1);
  uint16_t a = (counter * SEGLEN) >> 16;

  // Use intensity setting to vary chase up to 1/3 string length (to allow for black space)
  unsigned size = 1 + ((SEGMENT.intensity * SEGLEN) >> 11);

  uint16_t b = a + size; // end of color1
  if (b > SEGLEN)
    b -= SEGLEN;

  uint16_t c = b + size; // end of black space after color1
  if (c > SEGLEN)
    c -= SEGLEN;

  uint16_t d = c + size; // end of color2
  if (d > SEGLEN)
    d -= SEGLEN;

  uint16_t e = d + size; // end of black space after color2
  if (e > SEGLEN)
    e -= SEGLEN;

  uint16_t f = e + size; // end of color3
  if (f > SEGLEN)
    f -= SEGLEN;

  // Background
  SEGMENT.fill(0); // Set background to black

  // Fill with color1
  if (a < b)
  {
    for (unsigned i = a; i < b; i++)
      SEGMENT.setPixelColor(i, color1);
  }
  else
  {
    for (unsigned i = a; i < SEGLEN; i++)
      SEGMENT.setPixelColor(i, color1);
    for (unsigned i = 0; i < b; i++)
      SEGMENT.setPixelColor(i, color1);
  }

  // Fill with color2
  if (c < d)
  {
    for (unsigned i = c; i < d; i++)
      SEGMENT.setPixelColor(i, color2);
  }
  else
  {
    for (unsigned i = c; i < SEGLEN; i++)
      SEGMENT.setPixelColor(i, color2);
    for (unsigned i = 0; i < d; i++)
      SEGMENT.setPixelColor(i, color2);
  }

  // Fill with color3
  if (e < f)
  {
    for (unsigned i = e; i < f; i++)
      SEGMENT.setPixelColor(i, color3);
  }
  else
  {
    for (unsigned i = e; i < SEGLEN; i++)
      SEGMENT.setPixelColor(i, color3);
    for (unsigned i = 0; i < f; i++)
      SEGMENT.setPixelColor(i, color3);
  }

  return FRAMETIME;
}

